name: Daily Hindalco CSV Update

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '30 6 * * *'  # Run at 12:00 PM IST (6:30 AM UTC) daily

permissions:
  contents: write

jobs:
  update_csvs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          pip install PyPDF2 requests
          
      - name: Download Latest PDF and Extract CSV
        run: |
          python3 - <<'EOF'
          import os
          import requests
          from datetime import datetime, timedelta
          import sys
          
          # Try to download today's PDF first
          today = datetime.now()
          
          # Try different date formats and recent dates
          for days_back in range(3):
              check_date = today - timedelta(days=days_back)
              
              # Create directory structure
              base_path = f"Downloads/{check_date.strftime('%Y')}/{check_date.strftime('%b')}"
              os.makedirs(base_path, exist_ok=True)
              
              # Try different URL patterns
              patterns = [
                  f"primary-ready-reckoner-{check_date.strftime('%d-%B-%Y').lower()}.pdf",
                  f"primary-ready-reckoner-{check_date.strftime('%d-%b-%Y').lower()}.pdf",
                  f"Hindalco_Circular_{check_date.strftime('%d_%b_%y')}.pdf"
              ]
              
              for pattern in patterns:
                  url = f"https://www.hindalco.com/Upload/PDF/{pattern}"
                  filepath = os.path.join(base_path, pattern)
                  
                  try:
                      print(f"üîç Trying to download: {url}")
                      
                      headers = {
                          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                      }
                      
                      response = requests.get(url, headers=headers, timeout=30)
                      response.raise_for_status()
                      
                      # Check if it's actually a PDF
                      if len(response.content) > 10000:  # PDF should be substantial
                          with open(filepath, 'wb') as f:
                              f.write(response.content)
                          
                          print(f"‚úÖ Downloaded: {filepath} ({len(response.content)} bytes)")
                          
                          # Found a PDF, exit the loops
                          sys.exit(0)
                          
                  except requests.exceptions.RequestException as e:
                      print(f"‚ùå Failed: {url} - {e}")
                      continue
              
              if days_back == 0:
                  print(f"‚ö†Ô∏è No PDF found for today ({check_date.strftime('%Y-%m-%d')}), trying previous days...")
          
          print("‚ùå Could not download any recent PDF")
          sys.exit(1)
          EOF
          
      - name: Extract CSV from PDF
        run: |
          python csv_from_pdf.py
          
      - name: Commit CSV Updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if there are any changes
          if git diff --quiet && git diff --staged --quiet; then
            echo "üìù No changes detected in CSV files"
            exit 0
          fi
          
          # Add CSV files
          if ls csv/*.csv 1> /dev/null 2>&1; then
            git add csv/
            
            # Also add any downloaded PDFs
            if ls Downloads/**/*.pdf 1> /dev/null 2>&1; then
              git add Downloads/
            fi
            
            # Commit with informative message
            current_date=$(date '+%Y-%m-%d')
            git commit -m "Daily CSV update for ${current_date} [$(date '+%H:%M:%S')]"
            git push
            
            echo "‚úÖ CSV files updated and committed successfully"
          else
            echo "‚ùå No CSV files found to commit"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
