name: Test Extract July 11th
on:
  workflow_dispatch:
permissions:
  contents: write
jobs:
  extract_july_2nd_csv:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          pip install PyPDF2 requests
          
      - name: Download and Extract July 11th 2025 PDF
        run: |
          python3 - <<'EOF'
          import os
          import requests
          from datetime import datetime
          from csv_from_pdf import process_pdf
          
          # Create directory structure
          base_path = "Downloads/2025/Jul"
          os.makedirs(base_path, exist_ok=True)
          
          # Date for July 11th, 2025
          date_obj = datetime.strptime("2025-07-26", "%Y-%m-%d")
          
          # Construct URL and filename
          day = date_obj.strftime("%d")
          month = date_obj.strftime("%B").lower()
          year = date_obj.strftime("%Y")
          url = f"https://www.hindalco.com/Upload/PDF/primary-ready-reckoner-{day}-{month}-{year}.pdf"
          
          filename = f"primary-ready-reckoner-{day}-{month}-{year}.pdf"
          filepath = os.path.join(base_path, filename)
          
          print(f"📥 Downloading from: {url}")
          print(f"💾 Saving to: {filepath}")
          
          try:
              # Setup headers to mimic a real browser
              headers = {
                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                  'Accept-Language': 'en-US,en;q=0.5',
                  'Accept-Encoding': 'gzip, deflate',
                  'Connection': 'keep-alive',
                  'Upgrade-Insecure-Requests': '1',
              }
              
              # Download the PDF
              response = requests.get(url, headers=headers, timeout=30)
              response.raise_for_status()
              
              # Check if it's actually a PDF
              if response.headers.get('content-type', '').lower().find('pdf') == -1:
                  print("⚠️ Warning: Content type is not PDF")
              
              # Save the file
              with open(filepath, 'wb') as f:
                  f.write(response.content)
              
              file_size = len(response.content)
              print(f"✅ Successfully downloaded PDF: {filepath} ({file_size} bytes)")
              
              # Process the PDF to extract CSV
              if os.path.exists(filepath):
                  print(f"🔄 Processing PDF to extract CSV...")
                  process_pdf(filepath)
                  print(f"✅ CSV extraction completed for July 2nd, 2025")
              else:
                  print(f"❌ PDF file not found after download")
                  
          except requests.exceptions.RequestException as e:
              print(f"❌ Download failed: {e}")
              
              # Try alternative filename patterns if main download fails
              alternative_patterns = [
                  f"primary-ready-reckoner-2-{month}-{year}.pdf",  # Without zero padding
                  f"primary-ready-reckoner-{date_obj.strftime('%d-%b-%y').lower()}.pdf",
                  f"Hindalco_Circular_2_Jul_25.pdf"
              ]
              
              print(f"🔄 Trying alternative patterns...")
              for pattern in alternative_patterns:
                  alt_url = f"https://www.hindalco.com/Upload/PDF/{pattern}"
                  alt_filepath = os.path.join(base_path, pattern)
                  
                  try:
                      print(f"📥 Trying: {alt_url}")
                      alt_response = requests.get(alt_url, headers=headers, timeout=30)
                      alt_response.raise_for_status()
                      
                      with open(alt_filepath, 'wb') as f:
                          f.write(alt_response.content)
                      
                      print(f"✅ Successfully downloaded: {alt_filepath}")
                      process_pdf(alt_filepath)
                      print(f"✅ CSV extraction completed")
                      break
                      
                  except requests.exceptions.RequestException:
                      print(f"❌ Failed: {alt_url}")
                      continue
              else:
                  print("❌ All download attempts failed")
                  
          except Exception as e:
              print(f"⚠️ Unexpected error: {e}")
          EOF
          
      - name: Commit CSV Updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if ls csv/*.csv 1> /dev/null 2>&1; then
            git add csv/*.csv
            git add Downloads/2025/Jul/*.pdf
            git commit -m "Extract CSV from July 2nd, 2025 PDF"
            git push
          else
            echo "No CSVs found to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


